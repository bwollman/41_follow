/*
 * This file was automatically generated by EvoSuite
 */

package ghm.follow.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ghm.follow.gui.ExternalEditor;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestExternalEditor {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExternalEditor externalEditor0 = new ExternalEditor("d\"b6CfW+#J.h\"oV~Tz");
          File file0 = new File("d\"b6CfW+#J.h\"oV~Tz", "d\"b6CfW+#J.h\"oV~Tz");
          // Undeclared exception!
          try {
            externalEditor0.exec(file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"<<ALL FILES>>\" \"execute\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkExec(SecurityManager.java:799)
             * java.lang.ProcessBuilder.start(ProcessBuilder.java:1016)
             * java.lang.Runtime.exec(Runtime.java:615)
             * java.lang.Runtime.exec(Runtime.java:483)
             * ghm.follow.gui.ExternalEditor.exec(ExternalEditor.java:151)
             * sun.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      ExternalEditor externalEditor0 = new ExternalEditor((String) null);
      String[] stringArray0 = externalEditor0.toCmdArray((String) null);
      assertNotNull(stringArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      ExternalEditor externalEditor0 = new ExternalEditor("e&?|n,m  (J% f'");
      String[] stringArray0 = externalEditor0.toCmdArray("e&?|n,m  (J% f'");
      assertNotNull(stringArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      ExternalEditor externalEditor0 = new ExternalEditor("{_y3'l>Z$H<S'-JJ#2");
      String[] stringArray0 = externalEditor0.toCmdArray("{_y3'l>Z$H<S'-JJ#2");
      assertNotNull(stringArray0);
  }
}
