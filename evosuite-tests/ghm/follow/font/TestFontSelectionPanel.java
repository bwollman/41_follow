/*
 * This file was automatically generated by EvoSuite
 */

package ghm.follow.font;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ghm.follow.font.FontSelectionPanel;
import ghm.follow.font.NoFontStyleSelectedException;
import java.awt.Color;
import java.awt.Font;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JList;
import javax.swing.JSlider;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.FontUIResource;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestFontSelectionPanel {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FontSelectionPanel fontSelectionPanel0 = null;
      try {
        fontSelectionPanel0 = new FontSelectionPanel((Font) null);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class sun.font.FontScaler
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      FontSelectionPanel.PublicChangeObservable fontSelectionPanel_PublicChangeObservable0 = new FontSelectionPanel.PublicChangeObservable();
      fontSelectionPanel_PublicChangeObservable0.setChanged();
      assertEquals(true, fontSelectionPanel_PublicChangeObservable0.hasChanged());
  }

  @Test
  public void test2()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("The font family supplied, '");
      FontUIResource fontUIResource0 = (FontUIResource)jCheckBoxMenuItem0.getFont();
      JSlider jSlider0 = new JSlider((-1679), (-1679));
      ColorUIResource colorUIResource0 = (ColorUIResource)jSlider0.getBackground();
      FontSelectionPanel.PhraseCanvas fontSelectionPanel_PhraseCanvas0 = new FontSelectionPanel.PhraseCanvas("The font family supplied, '", (Font) fontUIResource0, (Color) colorUIResource0);
      fontSelectionPanel_PhraseCanvas0.setFont((Font) fontUIResource0);
      assertEquals(false, fontSelectionPanel_PhraseCanvas0.isMaximumSizeSet());
  }

  @Test
  public void test3()  throws Throwable  {
      FontSelectionPanel.ListCellRenderer fontSelectionPanel_ListCellRenderer0 = new FontSelectionPanel.ListCellRenderer();
      FontUIResource fontUIResource0 = (FontUIResource)fontSelectionPanel_ListCellRenderer0.getFont();
      JList<String> jList0 = new JList<String>();
      Color color0 = jList0.getSelectionForeground();
      FontSelectionPanel.PhraseCanvas fontSelectionPanel_PhraseCanvas0 = new FontSelectionPanel.PhraseCanvas("int[] predefinedSizes may not be null", (Font) fontUIResource0, color0);
      fontSelectionPanel_PhraseCanvas0.setColor(color0);
      assertEquals(false, fontSelectionPanel_PhraseCanvas0.isDisplayable());
  }

  @Test
  public void test4()  throws Throwable  {
      FontSelectionPanel.ListCellRenderer fontSelectionPanel_ListCellRenderer0 = new FontSelectionPanel.ListCellRenderer();
      FontUIResource fontUIResource0 = (FontUIResource)fontSelectionPanel_ListCellRenderer0.getFont();
      JList<String> jList0 = new JList<String>();
      Color color0 = jList0.getSelectionForeground();
      FontSelectionPanel.PhraseCanvas fontSelectionPanel_PhraseCanvas0 = new FontSelectionPanel.PhraseCanvas("int[] predefinedSizes may not be null", (Font) fontUIResource0, color0);
      String string0 = fontSelectionPanel_PhraseCanvas0.getPhrase();
      assertNotNull(string0);
      assertEquals("canvas8", fontSelectionPanel_PhraseCanvas0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      FontSelectionPanel.PhraseCanvas fontSelectionPanel_PhraseCanvas0 = new FontSelectionPanel.PhraseCanvas("+@k1ls!*?s%", (Font) null, (Color) null);
      fontSelectionPanel_PhraseCanvas0.setAntialiasOn(false);
      assertEquals("ghm.follow.font.FontSelectionPanel$PhraseCanvas[canvas10,0,0,0x0,invalid]", fontSelectionPanel_PhraseCanvas0.toString());
      assertEquals("canvas10", fontSelectionPanel_PhraseCanvas0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      FontSelectionPanel.ListCellRenderer fontSelectionPanel_ListCellRenderer0 = new FontSelectionPanel.ListCellRenderer();
      JList<Object> jList0 = new JList<Object>();
      fontSelectionPanel_ListCellRenderer0.getListCellRendererComponent((JList) jList0, (Object) "Name", (-358), false, false);
      assertEquals(4, fontSelectionPanel_ListCellRenderer0.getHorizontalAlignment());
  }

  @Test
  public void test7()  throws Throwable  {
      FontSelectionPanel.ListCellRenderer fontSelectionPanel_ListCellRenderer0 = new FontSelectionPanel.ListCellRenderer();
      FontUIResource fontUIResource0 = (FontUIResource)fontSelectionPanel_ListCellRenderer0.getFont();
      String[] stringArray0 = new String[4];
      int[] intArray0 = new int[3];
      FontSelectionPanel fontSelectionPanel0 = null;
      try {
        fontSelectionPanel0 = new FontSelectionPanel((Font) fontUIResource0, stringArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No member of String[] styleDisplayNames may be null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      FontSelectionPanel.ListCellRenderer fontSelectionPanel_ListCellRenderer0 = new FontSelectionPanel.ListCellRenderer();
      FontUIResource fontUIResource0 = (FontUIResource)fontSelectionPanel_ListCellRenderer0.getFont();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "int[] predefinedSizes may not be null";
      stringArray0[1] = "int[] predefinedSizes may not be null";
      stringArray0[2] = "int[] predefinedSizes may not be null";
      stringArray0[3] = "";
      int[] intArray0 = new int[3];
      FontSelectionPanel fontSelectionPanel0 = null;
      try {
        fontSelectionPanel0 = new FontSelectionPanel((Font) fontUIResource0, stringArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * int[] predefinedSizes may not contain integers with value less than 1
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[3];
      FontSelectionPanel.FontStyleList fontSelectionPanel_FontStyleList0 = null;
      try {
        fontSelectionPanel_FontStyleList0 = new FontSelectionPanel.FontStyleList(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * String[] styleDisplayNames must have a length of 4
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      FontSelectionPanel.FontStyleList fontSelectionPanel_FontStyleList0 = new FontSelectionPanel.FontStyleList(stringArray0);
      try {
        fontSelectionPanel_FontStyleList0.getSelectedStyle();
        fail("Expecting exception: NoFontStyleSelectedException");
      } catch(NoFontStyleSelectedException e) {
        /*
         * No font style is currently selected
         */
      }
  }
}
